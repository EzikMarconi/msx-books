
МИКРОКОМПЬЮТЕР Yamaha MSX-2

                   Книга 1








      К.И.Фахрутдинов,
      И.И.Бочаров


 АРХИТЕКТУРА И УСТРОЙСТВА
МИКРОКОМПЬЮТЕРОВ СТАНДАРТА
          MSX-2
 


МИКРОКОМПЬЮТЕР Yamaha MSX-2

В трех книгах






      К.И.Фахрутдинов,
      И.И.Бочаров


 АРХИТЕКТУРА И УСТРОЙСТВА
МИКРОКОМПЬЮТЕРОВ СТАНДАРТА
          MSX-2












Владивосток
Издательство Дальневосточного университета
1993
 

ББК
    
УДК 681.325.5-181.4


    Рекомендовано комитетом народного образования Приморского
    края в качестве практического пособия

                            Рецензенты:
      Лаборатория информатики Института повышения квалификации
      учителей (зав. лаб.                                    ),
                 
      
      

                       Печатается по решению
               редакционно-издательского совета ДВГУ



        Фахрутдинов К.И., Бочаров И.И.
           Микрокомпьютер Yamaha MSX-2: Практ. пособие: В 3-х кни-
        гах/ Кн.1: Архитектура и устройства микрокомпьютеров стан-
        дарта MSX-2.- Владивосток:  Издательство Дальневосточного
        университета, 1993.- 146 с.
           ISBN 

            В  учебном  пособии  рассмотрены   общие   структурные
         свойства  и   особенности   архитектуры   микрокомпьютера
         стандарта    MSX-2,    описаны    микропроцессор     Z80,
         видеопроцессор,      программируемый      звукогенератор,
         организация различных типов памяти и видеопамяти, форматы
         памяти на магнитных дисках  и  лентах,  энергонезависимая
         память и другие устройства системы.
            В приложениях приводится информация,  необходимая  при
         работе   на   компьютере,   и   в   особенности   -   для
         программирующих на языке ассемблера Z80 или  INTEL8080  в
         системе MSX-2.
            Книга будет полезна всем, кто работает, преподает  или
         учится на компьютерах YAMAHA MSX-1, MSX-2 и их аналогах.

          
──────────                                               ББК 
       

ISBN 
                                                   C  Издательство
                                     Дальневосточного университета
                                                              1993
 














                   МИКРОКОМПЬЮТЕР Yamaha MSX-2
                          В трех книгах
                                
                             Книга 1
                                
                                
                        К.И.Фахрутдинов,
                           И.И.Бочаров
                                
                    АРХИТЕКТУРА И УСТРОЙСТВА
                   МИКРОКОМПЬЮТЕРОВ СТАНДАРТА
                              MSX-2
                                
                                
                     Редактор  И.А. Пяткова
              Художественный редактор О.П. Крайнов
                 Технический редактор И.В. Шпинь
                     Корректор Л.П. Конарева







                                

















                            ИБ N 

Подписано в печать   .  .199  .Формат 60x84/16. Бумага тип N 3.
Усл. печ. л.   ,   . Уч.-изд. л.   ,  . Тираж       экз.
Цена      р.  Заказ

         Издательство Дальневосточного университета,
         690600, г. Владивосток, ул. Октябрьская, 27
         Полиграфический комбинат Управления издательств,
         полиграфии и книжной торговли Приморского крайисполкома
         690600, г. Владивосток, Океанский проспект, 69






                               
 



                   ВВЕДЕНИЕ

   Прошло  уже  более  пяти  лет  с   тех   пор,   как   различная
вычислительная техника стала широко внедряться в  средние  учебные
заведения. Приморский край занял одно из ведущих мест в стране  по
компьютеризации школы. Накоплен большой опыт и различные материалы
по  обучению  информатике  и  другим  предметам  и  по  разработке
программного обеспечения для школьных компьютеров.
   Классы   компьютеров   YAMAHA   MSX-1   и   MSX-2    достаточно
распространены  в  стране  и  крае,  однако   хорошей   и   полной
технической  документации  по  этой  системе   очень   мало.   Это
сдерживает разработку программного обеспечения.
   В  предлагаемом  Вашему  вниманию  учебном  пособии  собраны  и
систематизированы многие полезные сведения об  архитектуре  MSX-2.
Большинство источников информации  о  системе  труднодоступны  для
пользователей,  часть  источников,  к  сожалению  -   неизвестного
авторам происхождения.
   В   приложениях   приводится   информация,   необходимая    для
программирующих на языке ассемблера Z80 или INTEL8080  -  описание
рабочих областей BDOS и  BIOS,  портов  ввода/вывода,  подпрограмм
BIOS, BDOS и интерпретатора языка  MSX-BASIC,  сетевых  функций  и
регистров видеопроцессора.
   Во второй нашей книге описан язык ассемблера  Z80.  На  большом
количестве примеров показано, как  можно,  программируя  на  языке
ассемблера,   управлять   работой   всех   устройств   компьютера,
рассмотренных в той книге, что сейчас перед Вами.
   Материалы  книг  использовались  при  обучении  школьников   по
специальности    "Программирование",    переподготовке    учителей
информатики,  в  спецкурсах  по  архитектуре  микрокомпьютеров  на
математическом факультете Дальневосточного университета.
   Авторы благодарны  Д.В.Симончику,  который  внимательно  изучил
рукопись и сделал ряд ценных замечаний и поправок.


                                3  

           1. Общие сведения об архитектуре MSX-2

   Система MSX является  стандартом  восьмиразрядного  (школьного)
компьютера. Она появилась осенью 1983 г., а к декабрю 1985 г. было
продано более миллиона компьютеров MSX.
   Система MSX-2 была объявлена в мае 1985  г.  Она  имеет  полную
совместимость снизу вверх с MSX (MSX-1).
   В СССР были поставлены классы  учебной  вычислительной  техники
КУВТ  (MSX)   и   КУВТ-2   (MSX-2),   объединенные   в   локальные
вычислительные  сети,  которые   комплектовались,   в   частности,
компьютерами учителя "YAMAHA yis805/128" и  компьютерами  учеников
"YAMAHA yis503/III" для КУВТ-2 и компьютерами  "YAMAHA  yis503/II"
для КУВТ.

         Основные устройства системы MSX:
1. Микропроцессор (CPU) Z-80A;
2. Видеопроцессор (VDP) V9938 MSX VIDEO (совместимый  с  TMS-9918A
   в MSX-1);
3. Микросхемы периферийного  программируемого параллельного интер-
   фейса (PPI) Intel 8255 и последовательного  интерфейса RS 232C;
4. Программируемый генератор звуков (PSG) AY-2-8910;
5. Память:
                                MSX         MSX-2
         MSX BASIC, BIOS (ROM)  32K           48K
         Оперативная (RAM)      64K          128K
         Видео (VRAM)           16K          128K
         Видео для регистров
           ввода/вывода (ERAM)   -            64K
         Сетевая (NROM)         16K           32К
         Сетевая (NRAM)          -             2K
 6. Порты ввода/вывода;
 7. Шины данных, адреса, управления;
 8. Клавиатура;
 9. Печатающее  устройство  (принтер)  "GEMINI-10XR/15XR"   или
    "NL-10", либо любой другой MSX-принтер.
10. Дисководы для флоппи-дисков MF-2DD (MF-1DD);
11. Мышь;
12. Джойстик;
13. Плоттер;
14. Магнитофон.
                                4  

   Кроме  этого,  стандартные  устройства  MSX  включают  в   себя
драйверы   лазерных   дисков,   VTR,   контроллеры   синтезаторов,
видеосистемы, контроллеры роботов, температуры, различные адаптеры
для модемов и телефонных линий.
   Функциональную  схему  системы  можно   представить   следующим
образом:
 T16 >
Память   Процессор   Порты  Устройства           Устройства

            ┌─────────────────┬──────┐
            │                 │      │
            │         ┌─┐ ┌───┴────┐ │        ┌────────────┐
            │      ┌──┤ ├─┤ Маппер │ │        │ Клавиатура │
            │      │  └─┘ └────────┘ │        │ Магнитофон │
            │      │  ┌─┐  Периферийный       │ Индикаторы │
            │      ├──┤ ├─ интерфейс (PPI)  ──┤ Динамик    │
 ┌─────┐    │      │  └─┘                     │ Мышь       │
 │ RAM ├─┐  │      │  ┌─┐                     │ Джойстик   │
 └─────┘ ├──┘      ├──┤ ├─  ...  ...          │ Часы       │
 ┌─────┐ │ ┌─────┐ │  └─┘                     └────────────┘
 │ ROM ├─┤ │     │ │  ┌─┐ ┌─────────┐
 └─────┘ │ │ CPU │ ├──┤ ├─┤ Принтер │         ┌────────────┐
         ├─┤ Z80 ├─┤  └─┘ └─────────┘         │  Таймер    │
┌──────┐ │ │     │ │  ┌─┐                     ├────────────┤
│ NRAM ├─┤ │     │ ├──┤ ├─ RS232C ────────────┤ Компьютеры │
└──────┘ │ └─────┘ │  └─┘                     └────────────┘
┌──────┐ ├──┐      │  ┌─┐ ┌──────────────┐    ┌──────┐
│ NROM ├─┘  │      ├──┤ ├─┤Видеопроцессор├──┬─┤ VRAM │
└──────┘    │      │  └─┘ └──────────────┘  │ └──────┘
            │      │  ┌─┐                   │ ┌──────┐
            │      ├──┤ ├─  ...  ...        ├─┤ ERAM │
            │      │  └─┘                   │ └──────┘
            │      │                        │ ┌───────┐
            │      │                        └─┤Дисплей│
            │      │                          └───────┘
            │      │  ┌─┐ ┌───────────────┐      ┌─────────┐
            │      └──┤ ├─┤ Звукогенератор├──────┤ Динамик │
            │         └─┘ └───────────────┘      └─────────┘
            │    ┌──────────┐                     ┌──────────┐
            └────┤ Драйверы ├─────────────────────┤ Дисковод │
                 └──────────┘                     └──────────┘

   Основное устройство системы - микропроцессор Z-80. Он выполняет
все арифметические, логические и управляющие  операции.  Подробнее
его характеристики будут рассмотрены ниже.  При  работе  процессор
обменивается данными с памятью или с устройствами ввода/вывода.
   Видеопроцессор  управляет  выводом   на   экран   текстовой   и
графической информации.
   Системные  шины   представляют   собой   набор   соединительных
проводников-линий,   объединяющих    одноименные    выводы    всех
периферийных модулей. По каждой линии может быть передано значение
одного разряда двоичного кода. По роду передаваемой информации все
линии разделены  на  три  группы,  образующие  шину  данных,  шину
адресов и шину управления.
   Характерной    особенностью    шины    данных    является    ее
двунаправленность  (т.е.  возможность  передачи  данных  в  разные
моменты времени в различных направлениях).
                                5  

   Периферийными устройствами ЭВМ являются различные  запоминающие
устройства и регистры для подключения внешних устройств (например,
клавиатуры,   видеопроцессора   и   т.д.),   называемые    портами
ввода/вывода.  Поскольку  микропроцессор   Z-80   предназначен   в
основном  для  обработки   8-разрядных   двоичных   чисел,   порты
ввода/вывода тоже 8-разрядные.
   Микропроцессор Z-80 позволяет подключить к шинам адресов до 256
портов ввода/вывода.
   Запоминающее устройство ЭВМ состоит из набора 8-разрядных ячеек
памяти. Обмен данных между процессорными и периферийными  модулями
ЭВМ происходит по шине данных, также состоящей из 8 линий.
   Каждая ячейка памяти и  каждый  порт  ввода/вывода  имеют  свои
индивидуальные  номера  -  адреса.  Число  линий   адресной   шины
определяется разрядностью адресной  шины  микропроцессора  Z-80  и
равно 16. Это позволяет обращаться к 2 в 16 степени (64К)  ячейкам
памяти. Число К=1024  байт  является  одной  из  единиц  измерения
объема памяти.

                  2. Микропроцессор Z-80

   Ядром   компьютеров   стандартов   MSX   и    MSX-2    является
микропроцессор Z80 (Z80А), который был  разработан  фирмой  Zilog.
Эта фирма была создана специалистами, принимавшими ранее участие в
разработках   микропроцессоров   фирмы   Intel.   В   Японии   эта
микропроцессорная серия выпускается фирмой Sharp.
   Микропроцессор  Z80  представляет  собой  большую  интегральную
схему (БИС)  с  8500  транзисторами  на  кристаллической  пластине
площадью   4.6╬ 4.9  мм¤.   Его   архитектура    основывается   на
архитектурных принципах  микропроцесора  INTEL  8080  и  позволяет
выполнять  все  78  команд  этого  микропроцессора,  а  также   80
дополнительных команд (696 кодов операций в отличие от  244  кодов
INTEL8080). Основные особенности архитектуры Z80 приводятся в [5].
   Микропроцессор  Z80  имеет  восьмиразрядную   шину   данных   и
шестнадцатиразрядную шину адреса. Тактовая частота примерно 3.5795
MHz. Микропроцессор имеет 17 внутренних регистров. Предусмотрены 3
способа реакции на прерывания.  Имеется  второй  набор  из  восьми
8-разрядных  регистров,  которые  соответствуют  восьми  регистрам
микропроцессора INTEL 8080.
                                6  

   Основные технические характеристики микропроцессора Z80:
      Число выводов корпуса ............................... 40,48
      Напряжение питания, V ...............................    +5
      Максимальная потребляемая мощность, Wt ..............   1.1
      Основная тактовая частота, МHz ......................   3.5
      Непосредственно адресуемое пространство, Kb .........    64
      Время выполнения безадресной команды, mcs ...........   1.6
      Число основных команд ...............................   158
      Число регистров общего назначения ...................    16
      Число уровней прерывания ............................     2

   Хотя Z80  является  восьмиразрядным  процессором,  его  система
команд   содержит   несколько   операций   и    для    работы    с
шестнадцатиразрядными данными.

                    п.1. Основные блоки

   Основной   блок  микропроцессора  Z80  -  арифметико-логическое
устройство (АЛУ, CPU) с регистром-аккумулятором A.
   В микропроцессоре Z80 повторены  все  регистры  микропроцессора
INTEL 8080 и дополнительно к его 8-разрядным регистрам A,B,C,D,E,H
и L имеются также A',B',C',D',E',H' и L' и еще несколько регистров
специального назначения. Эти дополнительные регистры включают  два
16-разрядных  индексных  регистра  (IX,IY),  8-разрядный   регистр
вектора прерываний (I) и 7-разрядный  регистр  регенерации  памяти
(R). Кроме того, имеется один 16-разрядный PC (счетчик  команд)  и
один 16-разрядный SP (указатель стека).
   Микропроцессор  Z80 имеет два идентичных  8-разрядных  флаговых
регистра F и F', в которых предусмотрены четыре проверяемых и  два
непроверяемых  флага.  Четыре  проверяемых  флага  -  это  признак
переноса, признак нуля, признак  отрицательного  числа  и  признак
четности/переполнения.
   Два непроверяемых бита - это признак  полупереноса  (аналогичен
дополнительному признаку переноса в микропроцессоре INTEL 8085)  и
признак   вычитания.   Последний   используется   для    коррекции
результатов  операций  с  двоично-десятичными   числами,   помогая
определить  вид  предыдущей  операции,  поскольку   для   операций
сложения и вычитания коррекция различна.
   Имеется дешифратор команд с регистром команд для хранения  кода
                                7  

операции, устройство управления и сигнализации,  схема  десятичной
коррекции.

          п.2. Состав, обозначение и назначение регистров

   Как  уже  говорилось,  в  микропроцессоре  Z80   повторены  все
регистры  микропроцессора  INTEL  8080  и  дополнительно   к   его
8-разрядным регистрам  A,B,C,D,E,H  и  L  имеются  также  регистры
A',B',C',D',E',H' и L'  и  еще  несколько  регистров  специального
назначения.

А               - аккумулятор, используется для хранения операнда,
                  с которым работает арифметико-логическое устрой-
                  ство микропроцессора.  Результат  работы  АЛУ по
                  окончанию обработки данных обычно вновь помещают
                  в регистр A;
F               - регистр признаков (флагов);
B,C,D,E,H,L     - регистры общего назначения;
АF,BC,DE,HL     - регистровые пары, образуются  регистрами
                  общего назначения;
AF',BC',DE',HL' - дополнительные регистровые пары;
IX,IY           - индексные регистры;
SP              - регистр-указатель стека;
PC              - регистр-счетчик команд;
I               - регистр вектора прерываний, используется
                  в режиме прерываний IM 2;
R               - семибитный счетчик адреса динамического ОЗУ
                  для регенерации.

   Регистр I  предназначен  для  хранения  старшего  байта  адреса
программы обработки прерываний в режиме обработки прерываний IM 2.
Младший же байт адреса программы обработки  прерываний  передается
по шине данных от устройства, вызвавшего прерывание.
   Регистр R предназначен для хранения  адреса  динамического  ОЗУ
для регенерации. Регенерация  памяти  -  восстановление  памяти  с
периодичностью, заданной в технических условиях на микросхемы ОЗУ.
Регенерация необходима в  случае  использования  в  вычислительных
устройствах  динамической  памяти,  в  структуру  которых   входят
напыленные   по    МОП-технологии    (Металл-Окисел-Полупроводник)
конденсаторы. Потеря зарядов  конденсаторов  происходит  из-за  их
                                8  

утечки, а также в результате обращения к памяти при считывании  из
нее информации.
   В   микропроцессоре   Z80   используется   способ   циклической
регенерации   памяти.   Во   время   цикла   выполнения    команды
микропроцессором   существуют   определенные   интервалы,    когда
системная  адресная  шина  свободна.   Эти   временные   интервалы
используются микропроцессором Z80 для  доступа  к  адресным  шинам
динамической памяти  ОЗУ.  В  качестве  адресов  в  данном  случае
используются  7  младших  разрядов  адресного   поля   процессора,
сопровождаемые специальным сигналом, сообщающим, что данный  адрес
является адресом регенерации памяти. Регистр  R  хранит  очередной
адрес регенерируемой строки памяти.

                п.3. Регистр признаков

   При выполнении микропроцессором  некоторых  команд  в  регистре
признаков F в зависимости от  результата  операции  вырабатываются
признаки (флаги) состояния. Кроме этого, часть команд не  изменяют
некоторые признаки, установленные предыдущими командами, а часть -
дают неопределенные значения признаков. В каждом конкретном случае
обращайтесь к описанию команд.
   Биты 3 и 5 регистра F получают значения 0 или 1  в  зависимости
от  выполняемых  операций   и  при  программировании   обычно   не
используются.
 T16 >
      ┌──────┬────┬────┬────┬────┬────┬────┬────┬────┐
      │ Бит  │  7 │  6 │  5 │  4 │  3 │  2 │  1 │  0 │
      ├──────┼────┼────┼────┼────┼────┼────┼────┼────┤
      │ Флаг │  S │  Z │  * │  H │  * │  V │  N │  C │
      └──────┴────┴────┴────┴────┴────┤  P ├────┴────┘
                                      └────┘

   Один и тот же бит (P/V) используется различными операциями либо
для   установки/сброса   флага   переполнения   (V),   либо    для
установки/сброса флага четности (P).
   Биты признаков результата (флаги) имеют следующие обозначения и
смысл:
S - (Sign) знак результата (1 - минус, 0 - плюс).  При  выполнении
    арифметических команд каждый двоичный  операнд  представляется
    как 7-разрядное число со знаком, записанным в старшем разряде.
    Единица в восьмом разряде соответствует отрицательному числу в
    дополнительном коде;
                                9  

Z - (Zero) устанавливается в 1, если результат равен 0. В командах
    сравнения и поиска устанавливается,  когда  результат   поиска
    положительный, в командах работы с  битами  загружается допол-
    нительным значением проверяемого бита;
H - (Half-Carry) равен 1, если  был  перенос  из  3  разряда  в  4
    (перенос полуслова),  иначе  сбрасывается  в  0;  обычно  этот
    признак используется при сложении  чисел  в двоично-десятичной
    форме;
V - (Overflow)  устанавливается    равным   1,    если   результат
    арифметической операции не вмещается  в  регистр  (т.е.  число
    больше 127 или меньше -128).
P - (Parity) становится равным 1, если количество  битов-единиц  в
    байте-результате  логической  операции   или   сдвигов   четно
    (например, 01010011), иначе - 0.
N - (Negative)  устанавливается  в  1  после  выполнения  операций
    вычитания и  сравнения  и  сбрасывается  в  0  после  операций
    сложения, логических операций и сдвигов.
C - (Carry)  флаг   устанавливается,  если   в  результате  команд
    вычитания или сравнения происходит заем бита, очищается  после
    логических  команд,  и  получает   значение   выдвинутого   за
    разрядную сетку бита в командах циклического сдвига.

                     п.4. Система и форматы команд

   Каждый  микропроцессор  характеризуется  определенной  системой
команд.  Система  команд  -  это  полный   перечень   элементарных
действий,  которые  способен  производить  процессор.  Управляемый
этими командами процессор выполняет очень простые действия, такие,
как элементарные арифметические и  логические  операции,  операции
пересылки данных, сравнения двух величин и  др.  Однако,  составив
программу    из    последовательности    таких    команд,    можно
запрограммировать выполнение достаточно сложного алгоритма.
   Команды и данные представляются  в  памяти  компьютера  в  виде
двоичных чисел. Часто, анализируя участок памяти, нельзя  отличить
данные от команд. Лишь  очень  немногие  из  возможных  комбинаций
битов в байте или байтов не могут быть восприняты как команда.
   Команда, как правило, состоит из двух частей: кода  операции  и
адреса или данных. Как уже было сказано, команда минимальной длины
занимает один байт. Часть байта отводится на код операции,  другая
часть   адресует   операнды.   Ими   могут   быть   один   разряд,
                                10  

восьмиразрядный регистр или  регистровая  пара.  Адреса  регистров
могут быть явно заданы в команде или  неявно  определены  по  коду
операции.
   Можно рассмотреть структуру  однобайтовой  команды  на  примере
команды  ADD.  Двоичный  код  команды  имеет  вид  10000XXX,   где
XXX-адрес 8-разрядного регистра в двоичном коде. Команда  ADD  A,C
имеет двоичный код 10000001, т.к. "адрес"  регистра  C  -  001,  а
команда ADD A,(HL) имеет код 1000110, поскольку косвенный  операнд
(HL) задается кодом 110.
   Команды, имеющие длину 2 байта - это команды с  непосредственно
заданными  операндами.  В  их  коде  вторым  байтом  всегда  будут
восьмиразрядные данные, которые участвуют  в  операции.  Например,
команда ADD A,34h представляется в памяти в шестнадцатеричном виде
как C6 34.
   Трехбайтные команды - это либо команды безусловной или условной
передачи управления, такие как JP или CALL,  в  которых  второй  и
третий байты интерпретируются как 16-разрядный адрес, либо команда
LD,  которая  загружает  непосредственные  16-разрядные  данные  в
регистровую пару или указатель стека.
   Самые  большие  по  длине  (4   байта)   -   это   команды   из
дополнительного набора.  Они  в  основном  работают  с  индексными
регистрами IX и IY, а также несколько расширяют возможности работы
с основными регистрами процессора.
   Естественно, что запомнить 696 кодов операций, представленных в
виде двоичных 8-разрядных  чисел,  т.е.  в  виде  набора  нулей  и
единиц,  практически  невозможно.  Поэтому  каждому  коду  команды
ставится  в  соответствие   мнемоническое   название   (мнемоника)
команды,  которая  является  сокращением   от   английских   слов,
описывающих ее действие. Мнемонический код команд позволяет  легче
запомнить их функции и значительно упрощает написание программ.
   Операнды в свою очередь удобнее записывать не в двоичной,  а  в
шестнадцатиречной системе счисления. Операнд может быть задан явно
в виде конкретного числа или неявно, т.е. ему может быть присвоено
символическое имя, а конкретное  значение,  соответствующее  этому
имени, определяется в дальнейшем при переводе текста  программы  в
машинные коды.
   Когда  операнд  задается   непосредственно,   то   после   него
проставляется буква B, D или H, если число  записано  в  двоичной,
десятичной или шестнадцатеричной системе счисления  соответственно
                                11  

(причем если явно система счисления не задана, то  считается,  что
число задано в десятичной системе).
   Если мы при составлении программы задаем операнды неявно, то  в
начале или в конце текста программы определяем, чему эти  операнды
равны на самом деле. Для этого используется  директива  ассемблера
EQU.

                       п.5. Способы адресации

   Для   правильного   программирования   важно   знать   принципы
адресации, которые заложены в  архитектуру  микропроцессоре,  т.е.
знать, как происходит формирование кода на шине адреса.
   При обращении к памяти для чтения  кода  очередной  команды  из
микропроцессора на шину данных поступает содержимое  16-разрядного
регистра PC, называемого  счетчиком  команд.  В  этом  регистре  к
моменту    окончания    выполнения    текущей    команды    всегда
подготавливается адрес очередной команды программы.
   Во  время  выполнения  программы  микропроцессор  обращается  к
заданным ячейкам памяти для чтения и записи промежуточных  данных.
В системе команд имеются команды, с помощью которых  можно  задать
адрес   обращения   к   памяти    непосредственно    (команды    с
непосредственной адресацией). Как уже отмечалось,  они  имеют  3-х
(либо  4-х)  байтовый  формат,  т.е.  каждая  команда  занимает  3
последовательно расположенные в памяти ячейки.  В  последних  двух
ячейках хранится 16-разрядный адрес обращения к памяти.
   При выполнении такой команды микропроцессор переписывает  адрес
во внутренние буферные регистры и затем при  обращении  к  памяти,
для записи или чтения данных передает из этих  регистров  на  шину
адресов 16-разрядный адрес.
   Команды с непосредственной адресацией выполняются  относительно
медленно, т.к. микропроцессору при их выполнении приходится дважды
обращаться к памяти для побайтового чтения кода адреса.
   В системе команд есть  также  команды,  использующие  косвенную
адресацию.  При  их   выполнении   адресация   осуществляется   по
содержимому одной из регистровых пар  BC,  DE,  HL  или  индексных
регистров IX, IY, куда предварительно помещается  адрес  требуемой
ячейки памяти и откуда он поступает на шину адресов.
   Кроме описанных 2-х способов адресации,  возможна  адресация  к
ячейкам  памяти  по   содержимому   16-разрядного   регистра   SP,
называемого указателем стека. Под стеком  в  микропроцессоре  Z-80
                                12  

понимается  любая  область  ОЗУ,  служащая  для  хранения  адресов
констант  и  промежуточных  данных,  адесация  к  ячейкам  которой
осуществляется с помощью указателя стека SP. Поместить  и  извлечь
данные  из  стека  можно  только  через  его  вершину,   поскольку
используется принцип LIFO - "последним пришел - первым вышел".
   С помощью команд, использующих стековую адресацию, в стек можно
переслать  16-разрядное  число  из  любой  регистровой  пары   или
регистра-счетчика команд PC.
   Запись числа в стек происходит побайтно:  сначала  записывается
старший байт в ячейку с адресом на 1 меньшим указателя стека (т.е.
в ячейку с адресом SP-1), затем - младший байт в ячейку с  адресом
SP-2. Таким образом,  по  окончании  записи  содержимое  указателя
стека становится равным SP-2 (т.е. при  занесении  в  стек  данных
указатель стека автоматически каждый раз  "смещается  вниз"  на  2
ячейки).
   В системе  команд  есть  и  такие  команды,  которые  позволяют
осуществлять обратную операцию.  В  этом  случае  указатель  стека
увеличивается на 2.
   Стек явно и неявно широко используется при программировании.  В
стек, например, помещается адрес возврата при вызове  подпрограмм,
в стеке удобно временно хранить данные из регистров,  т.к.  запись
содержимого пары  регистров  в  стек  и  извлечение  их  из  стека
осуществляется  однобайтовыми  (  или  при  работе  с   индексными
регистрами двухбайтовыми) командами.
   В заключение приведем краткий список способов адресации [5]:
   1. Непосредственная адресация.
      В этом режиме ячейка, следующая за кодом операции,  содержит
      операнд (8 бит).
   2. Расширенная непосредственная адресация.
      Ячейки, следующие за кодом операции,  содержат  16-разрядный
      операнд.
   3. Модифицированная адресация нулевой страницы.
      Имеется команда, называемая рестартом, которая  используется
      для инициирования перехода  на  подпрограмму  по  одному  из
      возможных  адресов  нулевой  страницы.  В  ячейках  с  этими
      адресами могут размещаться часто используемые  подпрограммы,
      доступ к которым может осуществляться с помощью однобайтовых
      команд.
                                13  

   4. Относительная адресация.
      В этом режиме задается однобайтовое смещение в диапазоне  от
      +127 до -128 относительно текущего адреса плюс 2,  что  дает
      возможность    обращения    к    расположенной    поблизости
      подпрограмме с помощью команды длиной 2  байта  и  позволяет
      создавать перемещаемые программы.
   5. Расширенная адресация.
      Полный   16-разрядный    адрес    назначения    определяется
      двухбайтовым  операндом.  Этим  способом  можно   обеспечить
      обращение  к  подпрограмме  или  переход  по  любому  адресу
      памяти.
   6. Индексная адресация.
      Смещение прибавляется к числу  в  одном  из  двух  индексных
      регистров, образуя действительный адрес памяти. Этот  способ
      полезен для работы с таблицами.
   7. Регистровая адресация.
      Код  операции  включает  в  себя   обозначение   конкретного
      регистра.
   8. Неявная адресация.
      Регистр    адреса,    например    аккумулятор,    однозначно
      определяется данной командой.
   9. Регистровая косвенная адресация.
      16-разрядная пара регистров,  например  HL,  содержит  адрес
      операнда.
  10. Побитовая адресация.
      Три разряда  кода  операции  определяют  конкретные  разряды
      ячейки памяти, над которым производится данная операция.

   Внимание! Для хранения  в  памяти  16-разрядному  числу  всегда
отводится 2 смежные ячейки. Запись чисел в эти  ячейки  происходит
побайтно, причем в ячейку с меньшим адресом  записывается  младший
байт, а в ячейку с большим адресом - старший байт  числа  (принцип
системы  INTEL).  Это  правило  выполняется  при  любых   способах
адресации.

                     п.6. Прерывания

   Микропроцессорные  устройства   и   микроЭВМ   наиболее   часто
работают в так называемом "режиме реального времени".  Этот  режим
характерен  тем,  что  события   во   внешнем   по   отношению   к
                                14  

микропроцессору  мире  происходят  в   различные   непредсказуемые
заранее моменты времени.
   Микропроцессор должен своевременно реагировать на  эти  события
независимо от того,  занят  ли  он  в  данный  момент  какими-либо
другими  действиями  или  нет.  Для  этого   имеется   возможность
прерывания работы текущей программы  по  специальным  сигналам  от
внешних устройств или датчиков - запрос прерывания (IRQ).
   При поступлении запроса прерывания микропроцессор  переходит  к
выполнению подпрограммы обработки  прерываний,  т.е.  к  действию,
являющемуся реакцией на внешнее событие.
   При   появлении   запроса   прерывания   микропроцессор   после
выполнения очередной команды текущей программы  считывает  не  код
операции следующей команды из памяти, как обычно,  а  код  команды
вызова  подпрограммы,  формируемый  на  шинах  данных  специальным
блоком - контроллером прерываний.
   Выполнение команды процессором состоит из нескольких циклов:
∙ Чтение и декодирование кода операции, восстановление DRAM;
∙ Операции чтения/записи из памяти, из портов ввода/вывода;
∙ Внутренняя   операция    микропроцессора,    обработка   запроса
прерывания  IRQ.  Если  запрос  прерывания  был   послан   внешним
устройством, берется код его операции и адресный вектор.
   Обычно  в  качестве  команд   вызова   подпрограмм   используют
однобайтовые команды RST 0  -  RST  7.  В  зависимости  от  номера
команды ее выполнение ведет к передаче управления на одну из ячеек
памяти  в   начальной   области   памяти   (см.   систему   команд
микропроцессора). Программы обработки прерываний обычно начинаются
с сохранения всех регистров в стеке:
       PUSH    hl
       PUSH    de
       PUSH    bc
       PUSH    af
       EXX
       EX      af,af'
       PUSH    hl
       PUSH    de
       PUSH    bc
       PUSH    af
       PUSH    iy
       PUSH    ix
       ...
                                15  

   В конце подпрограммы обычно выполняются следующие команды:
       ...
       POP ix     ; Стандартное завершение обработки прерывания
       POP iy
       POP af
       POP bc
       POP de
       POP hl
       EX  af,af'
       EXX
       POP af
       POP bc
       POP de
       POP hl
       EI
       RET

   С помощью команд чтения из стека  восстанавливается  содержимое
регистров микропроцессора, а затем выполняется команда  разрешения
прерываний EI.  Последнее  необходимо,  т.к.  после  возникновения
прерывания  в  микропроцессоре  всегда  автоматически  запрещается
прием запросов прерываний. Последняя команда производит возврат  в
основную программу.
   Возврат происходит в то место этой программы и с тем состоянием
внутренних  регистров,  которые  были  до  момента   возникновения
прерывания. Вместо команд EI и RET можно использовать одну команду
RETI (возврат из маскируемого прерывания)  или  RETN  (возврат  из
немаскируемого  прерывания),  выбор  которых   зависит   от   типа
прерывания.
   Процессор Z-80 предусматривает несколько режимов прерывания: 
   1. Немаскируемое прерывание (NMI).
      В этом случае выполняется рестарт  с  ячейки  0066h.  Запрос
      немаскируемого прерывания принимается  процессором  в  любой
      момент  времени.  Однако  в  системе  MSX  сигнал   NMI   не
      используется и данное прерывание никогда не происходит, хотя
      для его обработки имеется ловушка.
   2. Маскируемое прерывание (INT).
      Терминал прерывания  INT  получает  60  сигналов  таймера  в
      секунду. Существует в трех видах, каждый из которых доступен
      для программиста:
                                16  

      a) вид 0: прерывания этого типа возникают автоматически  при
         появлении  сигнала  RESET;  реакция  на  него   идентична
         реакции  на  прерывание   в   процессоре   INTEL   8080A.
         Прерывающее устройство может выдать любую команду на шину
         данных  (обычно   команду   рестарта   или   трехбайтовую
         перехода), и процессор выполнит ее;
      b) вид 1: этот вид прерывания инициирует  рестарт  с  ячейки
         0038h, подобно реакции  на немаскируемое прерывание, хотя
         и отличается адресом перехода; сигнал INT  от VDP появля-
         ется на входе процессора каждые 1/60 секунды NTSC.
      c) вид 2: при этом виде  прерываний  прерывающее  устройство
         посылает в процессор 8-разрядное слово, которое указывает
         адрес   стандартной   программы   обработки   прерываний,
         хранящейся в памяти  программ.  Старшие  восемь  разрядов
         этого адреса помещаются программистом в  регистр  I.  Это
         наиболее  эффективный  способ   организации   прерываний,
         поскольку  один  8-разрядный  аргумент  может  определять
         адрес подпрограммы, расположенной в любом месте памяти.

                    3. Порты ввода/вывода

   Как уже говорилось, порты  -  это  устройства  сопряжения,  при
помощи которых микропроцессор Z80 может обмениваться информацией с
другими микропроцессорами или устройствами.
   Порт   хранит   восьмиразрядное   значение   (байт)   и   может
использоваться для чтения информации, ее  записи,  или  и  того, и
другого.
   Порты с номерами 0-14 используются для работы с  сетью  RS232C,
90h-92h - для работы с принтером, 98h-9Bh  -  с  видеопроцессором,
A8h-ABh - для работы с параллельным интерфейсом PPI и т.д.
   Список портов приведен в Приложении 2  вместе с  дополнительной
информацией по работе с ними.

                    4. Организация памяти

   При программировании в системе MSX используется несколько типов
памяти:
     RAM - Random Access Memory, ОЗУ, память доступная для  чтения
           и  записи  (место,  где  хранятся  программы,   данные,
           системные переменные и стек);
                                17  

     ROM - Read Only  Memory,  ПЗУ,  доступна  только  для  чтения
           (здесь   хранится   программа    начальной    загрузки,
           интерпретатор  языка  BASIC,  подпрограммы  в  машинных
           кодах - BIOS). Информация в ПЗУ сохраняется  независимо
           от того, включен источник питания или выключен.
     VRAM - Video  RAM,  видеопамять  (для  хранения  текстовых  и
           графических изображений, спрайтов). При желании  в  ней
           можно разместить обычные данные, если не хватает RAM).
   Организация памяти типов RAM и ROM будет описана  ниже  в  этом
параграфе, а организация видеопамяти - в 6.

                       п.1. Карта памяти

   Компьютер  YIS503  имеет  16-разрядную  шину  адреса.   Поэтому
возможна адресация до 2^16 ячеек памяти, т.е. диапазон адресов  от
0  до  65535  (FFFFh).  Каждая  ячейка  памяти  хранит  один  байт
информации.
   В системе MSX весь объем памяти разделен на 4 блока  (страницы)
по 16K. Страницы имеют следующие интервалы адресов:
     0 стр.: 0000h - 3FFFh
     1 стр.: 4000h - 7FFFh
     2 стр.: 8000h - BFFFh
     3 стр.: C000h - FFFFh

   Каждой странице (и значит,  интервалу  адресов)  реально  может
соответствовать не один, а несколько блоков памяти.  Но  в  каждый
момент времени каждой странице соответствует один и только один из
блоков (слоев) этой страницы.
   В данной системе страница памяти может подключаться к одному из
четырех блоков.
   Карта и содержимое слоев (слотов) памяти приведены на Рис.4.1.
   Здесь использованы следующие обозначения:
BIOS    - ПЗУ с BIOS (стандартные подпрограммы ввода/вывода);
EBIOS   - расширенный BIOS (для MSX-2);
BASIC   - ПЗУ с интерпретатором языка MSX-BASIC;
BDOS    - ПЗУ встроенного дисковода консольной Ямахи MSX-2;
PAINTER - ПЗУ с  графическим  редактором  (только  для  консольной
          Ямахи MSX-2);
RAM     - оперативная память;
                                18  

                      Компьютер YIS503III
 T16 >
             0     1     2           3
           ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ ┌───────┴───────┐ - Первичный слот
           │   │ │   │ │   │   0   1   2   3
           │   │ │   │ │   │ ┌─┴─┬─┴─┬─┴─┬─┴─┐ - Вторичный слот
────────   ┌───┐ ┌───┐ ┌───┐ ┌───┬───┬───┬───┐            ┌───┐
0000h      │   │ │   │ │   │ │ E │   │ R │   │          ┌─┤ 7 │
           │ B │ │   │ │   │ │ B │   │ A │   │          │ └───┘
 Стр. 0    │ I │ │   │ │   │ │ I │   │ M │   │          │ ┌───┐
           │ O │ │   │ │   │ │ O │   │   │   │          ├─┤ 6 │
3FFFh      │ S │ │   │ │   │ │ S │   │ ∙────────┐       │ └───┘
────────   ├───┤ ├───┤ ├───┤ ├───┼───┼───┼───┤  │       │ ┌───┐
4000h      │ B │ │   │ │   │ │   │   │ R │NET│  │Memory ├─┤ 5 │
           │ A │ │   │ │   │ │ C │   │ A │ROM│  │Mapper │ └───┘
 Стр. 1    │ S │ │   │ │   │ │ P │   │ M │   │  │┌───┐  │ ┌───┐
           │ I │ │   │ │   │ │ / │   │   │RAM│  └┼ ─ ┼──┼─┤ 4 │
7FFFh      │ C │ │   │ │   │ │ M │   │ ∙─────────┼ ─ ┼──┤ └───┘
────────   ├───┤ ├───┤ ├───┤ ├───┼───┼───┼───┤   │   │  │ ┌───┐
8000h      │   │ │   │ │   │ │   │   │ R │NET│ ┌─┼ ─ ┼──┼─┤ 3 │
           │   │ │   │ │   │ │   │   │ A │ROM│ │┌┼ ─ ┼──┤ └───┘
 Стр. 2    │   │ │   │ │   │ │   │   │ M │   │ ││└───┘  │ ┌───┐
           │   │ │   │ │   │ │   │   │   │RAM│ ││       ├─┤ 2 │
BFFFh      │   │ │   │ │   │ │   │   │ ∙───────┘│       │ └───┘
────────   ├───┤ ├───┤ ├───┤ ├───┼───┼───┼───┤  │       │ ┌───┐
C000h      │   │ │   │ │   │ │   │   │ R │   │  │       ├─┤ 1 │
           │   │ │   │ │   │ │   │   │ A │   │  │       │ └───┘
 Стр. 3    │   │ │   │ │   │ │   │   │ M │   │  │       │ ┌───┐
           │   │ │   │ │   │ │   │   │   │   │  │       └─┤ 0 │
FFFFh      │   │ │   │ │   │ │   │   │ ∙────────┘         └───┘
────────   └╚╚╚┘ └╚╚╚┘ └╚╚╚┘ └╚╚╚┴╚╚╚┴╚╚╚┴╚╚╚┘




                    Компьютер YIS805/128R2

             0     1     2           3
           ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ ┌───────┴───────┐ - Первичный слот
           │   │ │   │ │   │   0   1   2   3
           │   │ │   │ │   │ ┌─┴─┬─┴─┬─┴─┬─┴─┐ - Вторичный слот
────────   ┌───┐ ┌───┐ ┌───┐ ┌───┬───┬───┬───┐            ┌───┐
0000h      │   │ │   │ │   │ │   │ E │ R │   │          ┌─┤ 7 │
           │ B │ │   │ │   │ │   │ B │ A │   │          │ └───┘
 Стр. 0    │ I │ │   │ │   │ │ P │ I │ M │   │          │ ┌───┐
           │ O │ │   │ │   │ │   │ O │   │   │          ├─┤ 6 │
3FFFh      │ S │ │   │ │   │ │   │ S │ ∙────────┐       │ └───┘
────────   ├───┤ ├───┤ ├───┤ ├ A ┼───┼───┼───┤  │       │ ┌───┐
4000h      │ B │ │   │ │   │ │   │   │ R │NET│  │Memory ├─┤ 5 │
           │ A │ │   │ │   │ │   │ B │ A │ROM│  │Mapper │ └───┘
 Стр. 1    │ S │ │   │ │   │ │ I │ D │ M │   │  │┌───┐  │ ┌───┐
           │ I │ │   │ │   │ │   │ O │   │RAM│  └┼ ─ ┼──┼─┤ 4 │
7FFFh      │ C │ │   │ │   │ │   │ S │ ∙─────────┼ ─ ┼──┤ └───┘
────────   ├───┤ ├───┤ ├───┤ ├ N ┼───┼───┼───┤   │   │  │ ┌───┐
8000h      │   │ │   │ │   │ │   │   │ R │NET│ ┌─┼ ─ ┼──┼─┤ 3 │
           │   │ │   │ │   │ │   │   │ A │ROM│ │┌┼ ─ ┼──┤ └───┘
 Стр. 2    │   │ │   │ │   │ │ T │   │ M │   │ ││└───┘  │ ┌───┐
           │   │ │   │ │   │ │   │   │   │RAM│ ││       ├─┤ 2 │
BFFFh      │   │ │   │ │   │ │   │   │ ∙───────┘│       │ └───┘
────────   ├───┤ ├───┤ ├───┤ ├ E ┼───┼───┼───┤  │       │ ┌───┐
C000h      │   │ │   │ │   │ │   │   │ R │   │  │       ├─┤ 1 │
           │   │ │   │ │   │ │   │   │ A │   │  │       │ └───┘
 Стр. 3    │   │ │   │ │   │ │ R │   │ M │   │  │       │ ┌───┐
           │   │ │   │ │   │ │   │   │   │   │  │       └─┤ 0 │
FFFFh      │   │ │   │ │   │ │   │   │ ∙────────┘         └───┘
────────   └╚╚╚┘ └╚╚╚┘ └╚╚╚┘ └╚╚╚┴╚╚╚┴╚╚╚┴╚╚╚┘

                 Рис.4.1. Карта памяти MSX-2



                               19  

NET RAM - сетевая оперативная память (адресуется к одному  участку
          памяти);
NET ROM - сетевая постоянная память;
CP/M    - операционная система CP/M, ROM.
   По адресу FFFFh  расположен  специальный  регистр  переключения
вторичных слотов.
   Первый и второй слои (слоты) обычно используются для  работы  с
картами ПЗУ игр, музыкальных и графических редакторов, дисководов.
   Какой  из  слоев  включен  на  данной  странице,   определяется
содержимым порта A8h и регистром вторичных слоев (FFFFh).

   Формат порта A8h:

        Биты        7 6   5 4   3 2   1 0
                  ┌─────┬─────┬─────┬─────┐
        Слои      │ * * │ * * │ * * │ * * │
                  └─────┴─────┴─────┴─────┘
        Страницы     3     2     1     0

   На каждую страницу  в  порте  A8h  отводится  2  бита,  которые
кодируют число от 0 до 3  -  номер  слоя,  включенного  на  данной
странице.
   Например, при включении компьютера в порту A8h обычно  записано
значение:
                (A8h) = 1111 0000
   Это означает, что страницы 0 и 1 берутся из слота 0, а страницы
2 и 3 - из слота 3.
   Слой номер 3 состоит из 4 подслоев (вторичных слоев). Какой  из
вторичных  слоев  в  данный  момент   используется,   определяется
содержимым специального  регистра,  который  находится  по  адресу
FFFFh (для всех вторичных слоев первичного слоя номер 3 он общий).
Формат записи в этом специальном регистре такой же, как и в  порте
A8h. Отличием является то, что запись в него идет в прямом виде, а
читается значение - в инвертированном.
   Например, на ученическом компьютере после включения может  быть
установлено:
             (FFFFh) = 5Fh = 0101 1111
             инверсия: A0h = 1010 0000

     а на учительском -
             (FFFFh) = 59h = 0101 1001
             инверсия: A6h = 1010 0110
                                20  

   Подслой номер 2 первичного слоя номер  3  является  виртуальной
оперативной  памятью.  В  MSX-1  виртуальная  оперативная   память
совпадает с физической.  В  MSX-2  физическая  оперативная  память
имеет объем 128K и состоит из 8 страниц по 16K,  поэтому  страницы
виртуальной  памяти   отображаются   на   физическую   с   помощью
специального устройства под названием  маппер  (  Memory  Mapper),
если он есть.
   Управление этим устройством  осуществляется  с  помощью  портов
FCh, FDh, FEh, FFh. Порт  FCh  управляет  распределением  страницы
номер 0, FDh - номер 1, FEh - номер 2,  FFh  -  номер  3.  В  этих
портах  лежат  номера  страниц  физической  памяти,   на   которые
отображаются соответствующие страницы виртуальной памяти.
   Однако нужно иметь в виду, что модель с 64К  памяти  использует
только два младших бита, а модель со  128К  -  три  младших  бита.
Остальные биты устанавливаются в 1. Таким  образом  на  машине  со
128К памяти содержимое портов FCh..FFh выглядит как 11111***.
   Первоначальное содержимое портов FCh..FFh:
 T16 >
             ┌──────┬────────────┬────────────────────┐
             │      │ Логический │  Содержимое порта  │
             │ Порт │    номер   │ (номер физической  │
             │      │  страницы  │          страницы) │
             ├──────├────────────┼────────────────────┤
             │  FC  │      0     │    FB  (...3)      │
             │  FD  │      1     │    FA  (...2)      │
             │  FE  │      2     │    F9  (...1)      │
             │  FF  │      3     │    F8  (...0)      │
             └──────┴────────────┴────────────────────┘

   Таким  образом,  осуществляется   трехкратная   диспетчеризация
памяти: страница адресного пространства отображаетса  на  один  из
первичных слоев, первичный слой, если его номер - 3,  отображается
на один из вторичных слоев, вторичный слой, если его  номер  -  2,
отображается на страницу физической оперативной памяти.
   Два   наиболее   используемых   режима   работы   с   различной
организацией памяти - это режим интерпретатора языка  MSX-BASIC  и
режим MSX-DOS.
                   ∙ Режим MSX-BASIC
   Нулевую  и  первую  страницы  занимают  подпрограммы   BIOS   и
интерпретатор языка  BASIC,  вторая  и  третья  предназначены  для
хранения текста BASIC-программы  до  адреса  F37Fh  (для  дисковой
версии до DE76h), с адреса F380h (DE77h) по адрес FFFFh  размещена
рабочая (системная) область.
   Для каждого файла резервируется 267 байт.
   В системе MSX-1 в ячейках ПЗУ NN 45,46,47 записан ноль.
                                21  

             ПЗУ (слот 0)                  ПЗУ (слот 3-0/1)
 T16 >
  ───── ┌──────────────────────┐  ──── ┌──────────────────────┐
 0000   │   Входы в BIOS       │  0000 │                      │
 015B   │                      │       │                      │
  ───── ├──────────────────────┤       │                      │
 015C   │  Дополнит.входы      │       │   Входы SUBROM BIOS  │
 0179   │      в BIOS          │       │                      │
  ───── ├──────────────────────┤       │                      │
 017A   │     Резерв           │       │                      │
 01B7   │                      │       │                      │
  ───── ├──────────────────────┤       │                      │
 01B8   │   Интерпретатор      │       ├──────────────────────┤
        │  языка MSX-BASIC     │  01F0 │ Управление слотами   │
        │                      │       ├──────────────────────┤
        │                      │  0338 │ Интерпретатор языка  │
        │                      │       │   MSX-BASIC и BIOS   │
        │                      │  3FFF │                      │
 7FFC   │                      │       └──────────────────────┘
  ───── ├──────────────────────┤
 7FFD   │  Вход в BDOS         │            ОЗУ (слот 3-2)
 7FFF   │                      │
  ───── └──────────────────────┘  ┌──────────────────────────┐
 8000                    (BOTTOM) │ Программа на языке BASIC │
                                  │          (PIT)           │
                         (VARTAB) │ ┬     Переменные         │
                                  │ │        (VT)            │
                         (ARYTAB) │ ╦       Массивы          │
                                  │                          │
                                  │    Свободная область     │
                                  │ ╩                        │
                                  │ │         Стек           │
                         (STKTOP) │ ┴                        │
                                  │          Строки          │
                         (MEMTOP) │                          │
                                  │ Блоки управления файлами │
(HIMEM) - - - - - - - -  (HIMEM)  │- - - - - - - - - - - - - │
                                  │     Рабочая область      │
FFFF                              │            MSX           │
      - - - - - - - - - - - - - - └──────────────────────────┘


             Рис.4.2. Карта памяти в режиме MSX-BASIC



                         Слот 3-2

 ─────────────  ┌──────────────────────────┐
0000h           │                          │
                │        MSX-DOS BIOS      │
00FFh           │                          │
 ─────────────  ├──────────────────────────┤
0100h           │  Область для транзитных  │
                │  ┬     программ       ┬  │
                │  │                    │  │
                │  │    COMMAND.COM     │  │
                │  ╦        Стек        ╦  │
(0006)          ├──────────────────────────┤
                │       MSX-DOS.SYS        │
 ─────────────  ├──────────────────────────┤
HIMEM           │    Рабочая область MSX   │
FFFFh           │                          │
 ─────────────  └──────────────────────────┘



           Рис.4.3. Карта памяти в режиме MSX-DOS


                                22  

                       ∙ Режим MSX-DOS

   Файлы типа COM  загружаются  с  адреса  100h.  Система  MSX-DOS
размещается в старших адресах ОЗУ, над системной областью.
   В ячейке 5 хранится команда перехода к MSX-DOS -  JMP  BDOS,  в
ячейках 6,7 - адрес начала MSX-DOS, в  нулевой  ячейке  -  команда
перехода на рестарт DOS - JMP WBOOT.
   Команды языка ассемблера Z-80 могут занимать в памяти от 1 до 4
байт. Например: dec a - один байт; sub 23 - два байта; call  8900h
- 3 байта; ld (6700h),sp - 4 байта.

               п.2. Подпрограммы ПЗУ

   В  постоянную  память  компьютеров   MSX   и   MSX-2   записано
разнообразное программное  обеспечение.  Например,  при  включении
компьютера автоматически запускается редактор-интерпретатор  языка
MSX-BASIC, хранящийся в ПЗУ. На компьютере учителя можно запустить
графический редактор PAINTER, в ПЗУ  компьютера  ученика  хранится
операционная система CP/M.
   Программист   может   воспользоваться   несколькими    наборами
подпрограмм ПЗУ. В их число входят:
   ∙ подпрограммы MSX-BASIC BIOS;
   ∙ функции BDOS;
   ∙ сетевые функции MSX-DOS BIOS;
   ∙ подпрограммы интерпретатора языка MSX-BASIC.

             Подпрограммы MSX-BASIC BIOS 

   При помощи подпрограмм MSX-BASIC BIOS можно  управлять  слотами
памяти, обращаться к  видеопроцессору,  звукогенератору,  консоли,
кассетному магнитофону, дисководу, печатающему устройству.
   Эти подпрограммы хранятся в нулевой странице нулевого слота.
   Компьютеры  MSX-2,  кроме  этого, имеют  дополнительный   набор
подпрограмм - (SUBROM EBIOS), дающий возможности работы с графикой
MSX-2 и некоторые другие возможности.  EBIOS  хранится  в  нулевой
странице слота 3-0 компьютера ученика (YIS503III)  или  в  нулевой
странице слота 3-1 компьютера учителя (YIS805/128R2).
   Список подпрограмм BIOS и SUBROM EBIOS приведен в Приложении 3.

                                23  

                 Функции BDOS

   Эти функции обеспечивают  работу  операционной  системы  (DOS).
Операционная система управляет работой компьютера, поэтому в  этот
набор функций входят функции  рестарта,  ввода/вывода  символов  с
различных устройств, работы с  файлами,  установки/чтения  даты  и
времени и некоторые другие.
   Функции BDOS обычно расположены на первой странице  слота  3-1.
Список функций MSX BDOS приведен в Приложении 4.

               Сетевые функции MSX-DOS BIOS

   Сетевые  функции   позволяют   осуществлять   обмен   различной
информацией между компьютером учителя и компьютерами  учеников.  К
этим функциям относятся инициализация и отключение локальной сети,
получение  номера  компьютера  в  классе,  пересылки  программ   и
видеопамяти,  чтение/запись  в  память  указанного  компьютера   и
другие.
   Сетевые функции находятся в слоте 3-3 и могут быть вызваны  как
из MSX-DOS, так и в режиме MSX-BASIC. Список  функций  приведен  в
Приложении 6.

          Подпрограммы интерпретатора языка MSX-BASIC

   Интерпретатор языка MSX-BASIC использует в своей  работе  набор
различных подпрограмм,  из  которых  наиболее  полезными  являются
арифметические  подпрограммы  -  сложения,  вычитания,  умножения,
деления, возведения  в  степень  и  функции  для  различных  типов
данных.
   Эти подпрограммы, как и  MSX-BASIC  BIOS  находятся  в  нулевой
странице нулевого слота, а их список приведен в Приложении 5.

          п.3. Хранение программ на языке MSX-BASIC

   В режиме работы на языке MSX-BASIC  в  слоте  3-2  (оперативная
память) на страницах 2 и  3  обычно  размещается  текст  программы
пользователя (PIT - Program Instruction Table) на языке MSX-BASIC.
Как правило, она начинается по адресу &h8000.
   Рассмотрим на примере порядок и организацию хранения  программы
при ее размещении в PIT. Допустим, была набрана такая программа:
                                24  

              10 A=5
              20 B=A+47
              30 PRINT B
              40 END
   Тогда она будет размещена редактором языка MSX-BASIC  с  адреса
&h8000 следующим образом:


          ┌──────────────────────────────────┐    ┌──────────
│8000 ┌───┴───┐     │8004          │8007     ╦┌───┴───┐│800B
├────┬────┬────┬────┼────┬────┬────┼────┬────┬────┬────┼────┬
│ 00 │ 09 │ 80 │ 0A │ 00 │ 41 │ EF │ 16 │ 00 │ 14 │ 80 │ 14 │
└────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴
                 └─────┘                                 └───
                    10      A    =    5    *                20


────────────────────────────────────────┐    ┌───────────────
│800C               │8010               ╦┌───┴───┐     │8017
┼────┬────┬────┬────┼────┬────┬────┬────┬────┬────┬────┼────┬
│ 00 │ 42 │ EF │ 41 │ F1 │ 0F │ 2F │ 00 │ 1C │ 80 │ 1E │ 00 │
┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴
───┘                                                └─────┘
        B    =    A    +      47      *                30


────────────────────┐    ┌────────────────────────┐
│8018               ╦┌───┴───┐     │801F          ╦
┼────┬────┬────┬────┬────┬────┬────┼────┬────┬────┬────┬────┐
│ 91 │ 20 │ 42 │ 00 │ 22 │ 80 │ 28 │ 00 │ 81 │ 00 │ 00 │ 00 │
┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┘
                                └─────┘
 PRINT └─┘   B    *                40     END   *     конец
                                                    программы

   В первом байте PIT хранится  ноль.  Затем  для  каждой  команды
последовательно записываются  ссылка  на  следующую  команду  (два
байта  в  обратном  порядке),   номер   строки   программы   (тоже
инвертирован), затем внутреннее  представление  строки  программы,
которое заканчивается нулевым кодом.
   Конец программы определяется по  нулевой  ссылке  на  следующую
программную строку. Ключевые слова, знаки операций и  цифры  языка
MSX-BASIC кодируются одним (81h..FCh) или двумя (255  +  81h..B0h)
байтами.

                  п.4. Хранение данных

   При выполнении программ на языке MSX-BASIC переменные  хранятся
в специальной таблице (VARTAB), которая размещается в памяти сразу
за текстом программы.
   Для хранения имени переменной  выделяется  2  байта  (  поэтому
переменные AB, ABC и AB1 считаются одной и той же переменной), тип
переменной хранится в одном байте, значение переменной хранится  в
нескольких байтах (в зависимости от типа).
                                25  

   Целая (AB% = &h1234):
 T16 >
 ┌───┬───┬───┬────┬────┐
 │ 2 │'A'│'B'│ 34 │ 12 │
 └───┴───┴───┴────┴────┘


   Вещественная одинарной точности (AB!=1.23456):
 T16 >
 ┌───┬───┬───┬────┬────┬────┬────┐
 │ 4 │'A'│'B'│ 41 │ 12 │ 34 │ 56 │
 └───┴───┴───┴────┴────┴────┴────┘


   Вещественная двойной точности (AB#=1.2345678901324):
 T16 >
  ┌───┬───┬───┬────┬────┬────┬────┬────┬────┬────┬────┐
  │ 8 │'A'│'B'│ 41 │ 12 │ 34 │ 56 │ 78 │ 90 │ 13 │ 24 │
  └───┴───┴───┴────┴────┴────┴────┴────┴────┴────┴────┘

   Строка (AB$="rrrrr"):
 T16 >
 ┌───┬───┬───┬───┬────┬────┐
 │ 3 │'A'│'B'│ 5 │ 00 │ 89 │
 └───┴───┴───┴───┴────┴────┘
               ^      ^
             длина   адрес строки в памяти

   Переменные с  одинаковыми  именами  могут  быть  разных  типов.
Интерпретатор различает их, поскольку тип  переменной  хранится  в
таблице отдельно.
   Функция  языка  MSX-BASIC  VARPTR  дает   адрес,   с   которого
начинается  значение  переменной.   Тип   и   имя   имеют   адреса
соответственно на 3 и 2 байта меньше.

                    Хранение целых значений

   Значения переменных целого типа  хранятся  в  двоичной  системе
счисления в дополнительном коде. Каждое значение хранится  в  двух
байтах, причем младший байт значения размещается перед старшим.
     Например,
     A=3     Шестнадцатеричное значение - 0003h.
             В таблице будет записано:

               ┌────┬────┬────┬────┬────┐
               │ 02 │ 41 │ 00 │ 03 │ 00 │
               └────┴────┴────┴────┴────┘


                           26  

     XY=300  Шестнадцатеричное значение - 12Ch.
             В таблице будет записано:

               ┌────┬────┬────┬────┬────┐
               │ 02 │ 58 │ 59 │ 2C │ 01 │
               └────┴────┴────┴────┴────┘


     P1=-6   Шестнадцатеричное значение - 0006h,
             дополнительный код -         FFFAh.
             В таблице будет записано:

               ┌────┬────┬────┬────┬────┐
               │ 02 │ 50 │ 31 │ FA │ FF │
               └────┴────┴────┴────┴────┘


                Хранение вещественных значений

   Представление  вещественного  значения  состоит  из  порядка  и
двоично-десятичной мантиссы.
   Порядок задает знак мантиссы и степень десяти, на которую нужно
умножить мантиссу. Знак мантиссы кодируется первым битом  порядка,
а степень десяти - следующим образом :
       Шестн. код  Десятичное значение
           00          -64
           01          -63
           ...          ...
           3F           -1
           40            0
           41            1
           ...          ...
           7F           63

   Таким образом код порядка 42 означает увеличение мантиссы в 100
раз.
   Мантисса вещественного значения  обычной  точности  хранится  в
трех  байтах,  двойной  -  в  семи  байтах.   Для   ее   кодировки
используется двоично-десятичный код ( BCD).  Поэтому  вещественные
значения обычной точности могут иметь до шести десятичных цифр,  а
двойной - до четырнадцати.

                              27  

   Например,  вещественная  переменная  обычной  точности   A   со
значением 34.47 будет храниться в таблице переменных в виде:

 ┌────┬────┬────┬────┬────┬────┬────┐
 │ 04 │ 41 │ 00 │ 42 │ 34 │ 47 │ 00 │
 └────┴────┴────┴────┴────┴────┴────┘


                Хранение массивов

   При программировании на языке MSX-BASIC массивы хранятся  сразу
за таблицей переменных в формате, приведенном на Рис.4.1.
 T16 >
 ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬────
 │ VT  │ VN  │ LEN │ ND  │ NIn │ ... │ NI2 │ NI1 │ D1  │ D2  │ ...
 └─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴────

VT  - тип переменной
VN  - имя переменной (2 байта)
LEN - общая длина массива (2 байта)
ND  - количество измерений
NIn -максимальная размерность последнего измерения + 1 (2 байта)
NI1 -максимальная размерность первого измерения + 1 (2 байта)
D1,D2,... - элементы массива.

                Рис.4.1. Формат хранения массива

   Например, если выполнить следующие операторы  языка  MSX-BASIC
        DEFINTA-Z:DIM AB(2,4):AB(0,0)=32:AB(1,0)=10,
то внутреннее представление массива AB будет иметь вид:
 T16 >
        ┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─
        │02│41│42│23│00│02│05│00│03│00│20│00│0A│00│
        └──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴─
                  └───┘    └───┘ └───┘ └───┘ └───┘
        Тип A  B кол-во ND  NI2   NI1    32    10

               п.5. Рабочая область и ловушки

   Для  работы  интерпретатора   и   экранного   редактора   языка
MSX-BASIC, которые как Вы  помните,  размещены  в  ПЗУ,  требуется
некоторый объем оперативной памяти. В ней могут храниться  текущий
тип экрана и адреса таблиц видеопамяти, текущая строка и позиция в
строке программы, различные флаги  и  признаки,  указатели  буфера
клавиатуры, рабочие области для  выполнения  различных  операторов
языка MSX-BASIC и т.д.
                               28  

   Рабочей областью пользуется  и  MSX-DOS,  поэтому  ее  называют
иногда еще системной областью.
   Достаточно полное описание рабочей области системы MSX-2 дано в
Приложении 1.

                      п.6. Сетевая память

   В версии 3.0 локальной сети КУВТ-2 каждому компьютеру,  включая
учительский, предоставляется 2 Кбайта сетевой  оперативной  памяти
(RAM) с адресами 7800h Ў 7FFFh, слот 3-3.
  Краткая карта памяти сетевого ОЗУ КУВТ-2 приведена на Рис.4.2.

┌──────┬──────────────────────────────────────────────┬───────┐
│ Адрес│              Назначение                      │ Объем │
├──────┼──────────────────────────────────────────────┼───────┤
│ 7800 │ Область для передаваемых сообщений (message) │  256  │
│ 78FF │                                              │       │
├──────┼──────────────────────────────────────────────┼───────┤
│ 7900 │ Передающий почтовый ящик (mailbox)           │  256  │
│ 79FF │                                              │       │
├──────┼──────────────────────────────────────────────┼───────┤
│ 7A00 │ Область для получаемых сообщений (message)   │  256  │
│ 7AFF │                                              │       │
├──────┼──────────────────────────────────────────────┼───────┤
│ 7B00 │ Получающий почтовый ящик (mailbox)           │  256  │
│ 7BFF │                                              │       │
├──────┼──────────────────────────────────────────────┼───────┤
│ 7C00 │ Область управления файлами (FCB)             │  1024 │
│      │                                              │       │
│      │ Системная рабочая область                    │       │
│      │                                              │       │
│      │ Область DMA                                  │       │
│      │                                              │       │
│ 7FFF │ Рабочая область для сетевого приема          │       │
└──────┴──────────────────────────────────────────────┴───────┘

           Рис.4.2. Карта памяти сетевого ОЗУ КУВТ-2

   Кроме этого, в слоте 3-3 размещены сетевые подпрограммы  -  ROM
Net BIOS, которые были описаны выше в пункте Подпрограммы ПЗУ.

                 5. Видеопроцессор

   Видеопроцессор управляет отображением информации на экране.  Он
работает под управлением микропроцессора Z-80A, однако имеет  свой
набор команд и свои видеорегистры.
   В компьютерах YIS503IIR и  YIS503IIIR  используется  микросхема
VDP (Video Display Processor) V9938 (MSX-VIDEO). Микросхема  V9938
полностью совместима снизу вверх с  микросхемой  VDP TMS9918A  для
MSX-1 и может выполнять все  программное  обеспечение,  написанное
для TMS9918A.
                               29  
